{"ast":null,"code":"var _jsxFileName = \"/Users/konvict/Downloads/integrations_technical_assessment/frontend/src/integrations/hubspot.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Box, Button, TextField } from \"@mui/material\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HubspotIntegration = ({\n  user,\n  org,\n  integrationParams,\n  setIntegrationParams\n}) => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const onAuthorize = async () => {\n    try {\n      setLoading(true);\n      const formData = new FormData();\n      formData.append(\"user_id\", user);\n      formData.append(\"org_id\", org);\n\n      // Request backend to return the HubSpot OAuth URL\n      const resp = await axios.post(\"http://localhost:8000/integrations/hubspot/authorize\", formData);\n      const url = resp.data;\n\n      // Open the OAuth popup\n      const popup = window.open(url, \"_blank\", \"width=800,height=600\");\n\n      // Poll backend for credentials while popup is open / after it closes\n      const interval = setInterval(async () => {\n        try {\n          // Check credentials endpoint (will throw 400 until credentials are available)\n          const credsForm = new FormData();\n          credsForm.append(\"user_id\", user);\n          credsForm.append(\"org_id\", org);\n          const credentialsResp = await axios.post(\"http://localhost:8000/integrations/hubspot/credentials\", credsForm);\n          const credentials = credentialsResp.data;\n\n          // If we get credentials, update parent and stop polling\n          setIntegrationParams({\n            type: \"HubSpot\",\n            credentials\n          });\n          clearInterval(interval);\n          if (popup) popup.close();\n          setLoading(false);\n        } catch (err) {\n          // credentials not ready yet — ignore. If popup closed and timeout reached, stop eventually.\n          // If popup closed, we still keep trying for a short period.\n        }\n      }, 1500);\n\n      // Safety: stop polling after 2 minutes\n      setTimeout(() => {\n        clearInterval(interval);\n        setLoading(false);\n      }, 120000);\n    } catch (e) {\n      var _e$response, _e$response$data;\n      setLoading(false);\n      alert((e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.detail) || e.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    sx: {\n      width: 400\n    },\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Integration\",\n      value: \"HubSpot\",\n      sx: {\n        mt: 2\n      },\n      InputLabelProps: {\n        shrink: true\n      },\n      disabled: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onAuthorize,\n      sx: {\n        mt: 2\n      },\n      variant: \"contained\",\n      disabled: loading,\n      children: loading ? \"Authorizing...\" : \"Authorize HubSpot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(HubspotIntegration, \"/Rjh5rPqCCqf0XYnTUk9ZNavw3Q=\");\n_c = HubspotIntegration;\nvar _c;\n$RefreshReg$(_c, \"HubspotIntegration\");","map":{"version":3,"names":["useState","Box","Button","TextField","axios","jsxDEV","_jsxDEV","HubspotIntegration","user","org","integrationParams","setIntegrationParams","_s","loading","setLoading","onAuthorize","formData","FormData","append","resp","post","url","data","popup","window","open","interval","setInterval","credsForm","credentialsResp","credentials","type","clearInterval","close","err","setTimeout","e","_e$response","_e$response$data","alert","response","detail","message","display","flexDirection","sx","width","children","label","value","mt","InputLabelProps","shrink","disabled","fileName","_jsxFileName","lineNumber","columnNumber","onClick","variant","_c","$RefreshReg$"],"sources":["/Users/konvict/Downloads/integrations_technical_assessment/frontend/src/integrations/hubspot.js"],"sourcesContent":["import { useState } from \"react\";\nimport { Box, Button, TextField } from \"@mui/material\";\nimport axios from \"axios\";\n\nexport const HubspotIntegration = ({\n  user,\n  org,\n  integrationParams,\n  setIntegrationParams,\n}) => {\n  const [loading, setLoading] = useState(false);\n\n  const onAuthorize = async () => {\n    try {\n      setLoading(true);\n      const formData = new FormData();\n      formData.append(\"user_id\", user);\n      formData.append(\"org_id\", org);\n\n      // Request backend to return the HubSpot OAuth URL\n      const resp = await axios.post(\n        \"http://localhost:8000/integrations/hubspot/authorize\",\n        formData\n      );\n      const url = resp.data;\n\n      // Open the OAuth popup\n      const popup = window.open(url, \"_blank\", \"width=800,height=600\");\n\n      // Poll backend for credentials while popup is open / after it closes\n      const interval = setInterval(async () => {\n        try {\n          // Check credentials endpoint (will throw 400 until credentials are available)\n          const credsForm = new FormData();\n          credsForm.append(\"user_id\", user);\n          credsForm.append(\"org_id\", org);\n\n          const credentialsResp = await axios.post(\n            \"http://localhost:8000/integrations/hubspot/credentials\",\n            credsForm\n          );\n          const credentials = credentialsResp.data;\n\n          // If we get credentials, update parent and stop polling\n          setIntegrationParams({\n            type: \"HubSpot\",\n            credentials,\n          });\n          clearInterval(interval);\n          if (popup) popup.close();\n          setLoading(false);\n        } catch (err) {\n          // credentials not ready yet — ignore. If popup closed and timeout reached, stop eventually.\n          // If popup closed, we still keep trying for a short period.\n        }\n      }, 1500);\n\n      // Safety: stop polling after 2 minutes\n      setTimeout(() => {\n        clearInterval(interval);\n        setLoading(false);\n      }, 120000);\n    } catch (e) {\n      setLoading(false);\n      alert(e?.response?.data?.detail || e.message);\n    }\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" sx={{ width: 400 }}>\n      <TextField\n        label=\"Integration\"\n        value=\"HubSpot\"\n        sx={{ mt: 2 }}\n        InputLabelProps={{ shrink: true }}\n        disabled\n      />\n      <Button\n        onClick={onAuthorize}\n        sx={{ mt: 2 }}\n        variant=\"contained\"\n        disabled={loading}\n      >\n        {loading ? \"Authorizing...\" : \"Authorize HubSpot\"}\n      </Button>\n    </Box>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}